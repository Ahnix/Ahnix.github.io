I"Æ#<p><img src="/images/nodejsexpress.png" style="width: 286px; height: 180px;" /></p>

<h2 id="link---repositorio">link -&gt; repositorio</h2>
<p>https://github.com/Ahnix/movies</p>

<p> comentando o code</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="s1">'use strict'</span>

// import lib express e complementares para ser usada
const express <span class="o">=</span> require<span class="o">(</span><span class="s1">'express'</span><span class="o">)</span>
const request <span class="o">=</span> require<span class="o">(</span><span class="s1">'request'</span><span class="o">)</span>
const path <span class="o">=</span> require<span class="o">(</span><span class="s1">'path'</span><span class="o">)</span>

// onde esta escrito suakey troque obviamente pela key gerada <span class="k">do </span>imdb para uso da api
const tmdbApiKey <span class="o">=</span> suakey


// pegando o trending top filmes <span class="k">do </span>dia
const optionsTrending <span class="o">=</span> <span class="o">{</span>
  method: <span class="s1">'GET'</span>,
  url: <span class="s1">'https://api.themoviedb.org/3/trending/movie/day'</span>,
  qs: <span class="o">{</span>
    api_key: tmdbApiKey,

  <span class="o">}</span>
<span class="o">}</span>

// pegando o top rank de filmes
const optionsTopRatedRecommended <span class="o">=</span> <span class="o">{</span>
  method: <span class="s1">'GET'</span>,
  url: <span class="s1">'https://api.themoviedb.org/3/movie/top_rated'</span>,
  qs: <span class="o">{</span>
    api_key: tmdbApiKey,
    region: <span class="s1">'gb'</span>,

  <span class="o">}</span>
<span class="o">}</span>

// pegando detalhes <span class="k">do </span>filme 
const optionsMovieDetails <span class="o">=</span> <span class="o">{</span>
  method: <span class="s1">'GET'</span>,
  url: undefined,
  qs: <span class="o">{</span>
    api_key: tmdbApiKey,
    append_to_response: <span class="s1">'videos,credits'</span>,

  <span class="o">}</span>
<span class="o">}</span>

// autocompelte para um campo de pesquisa
const optionsMovieAutocomplete <span class="o">=</span> <span class="o">{</span>
  method: <span class="s1">'GET'</span>,
  url: <span class="s1">'https://api.themoviedb.org/3/search/movie'</span>,
  qs: <span class="o">{</span>
    api_key: tmdbApiKey,
    query: undefined,

  <span class="o">}</span>
<span class="o">}</span>

<span class="nb">let </span>parsedResult

tmdbApiKey
  ?
  console.log<span class="o">(</span><span class="s1">'TMDb api key is found'</span><span class="o">)</span> :
  console.log<span class="o">(</span><span class="s1">'TMDb api key is NOT found among environment variables!'</span><span class="o">)</span>

async <span class="k">function </span>apiCall<span class="o">(</span>options<span class="o">)</span> <span class="o">{</span>
  // <span class="o">(</span>I.<span class="o">)</span> promise to <span class="k">return </span>the parsedResult <span class="k">for </span>processing
  <span class="k">function </span>tmdbRequest<span class="o">()</span> <span class="o">{</span>
    <span class="k">return </span>new Promise<span class="o">(</span><span class="k">function</span> <span class="o">(</span>resolve, reject<span class="o">)</span> <span class="o">{</span>
      request<span class="o">(</span>options, <span class="k">function</span> <span class="o">(</span>error, response, body<span class="o">)</span> <span class="o">{</span>
        try <span class="o">{</span>
          resolve<span class="o">(</span>JSON.parse<span class="o">(</span>body<span class="o">))</span>
        <span class="o">}</span> catch <span class="o">(</span>e<span class="o">)</span> <span class="o">{</span>
          reject<span class="o">(</span>e<span class="o">)</span>
        <span class="o">}</span>
      <span class="o">})</span>
    <span class="o">})</span>
  <span class="o">}</span>

  // <span class="o">(</span>II.<span class="o">)</span>
  try <span class="o">{</span>
    parsedResult <span class="o">=</span> await tmdbRequest<span class="o">()</span>
  <span class="o">}</span> catch <span class="o">(</span>e<span class="o">)</span> <span class="o">{</span>
    console.error<span class="o">(</span>e<span class="o">)</span>
  <span class="o">}</span>
  <span class="k">return </span>parsedResult
<span class="o">}</span>

// subindo api -&gt; localhost:5000
<span class="k">function </span>endpointCreation<span class="o">()</span> <span class="o">{</span>
  try <span class="o">{</span>
    const app <span class="o">=</span> express<span class="o">()</span>
    const port <span class="o">=</span> process.env.PORT <span class="o">||</span> 5000

    app.use<span class="o">(</span>express.static<span class="o">(</span>path.join<span class="o">(</span>__dirname, <span class="s1">'client/build'</span><span class="o">)))</span>
    // required to serve SPA on heroku production without routing problems<span class="p">;</span> it will skip only <span class="s1">'api'</span> calls
    <span class="k">if</span> <span class="o">(</span>process.env.NODE_ENV <span class="o">===</span> <span class="s1">'production'</span><span class="o">)</span> <span class="o">{</span>
      app.get<span class="o">(</span>/^<span class="o">((</span>?!<span class="o">(</span>api<span class="o">))</span>.<span class="o">)</span><span class="k">*</span><span class="nv">$/</span>, <span class="k">function</span> <span class="o">(</span>req, res<span class="o">)</span> <span class="o">{</span>
        res.sendFile<span class="o">(</span>path.join<span class="o">(</span>__dirname, <span class="s1">'client/build'</span>, <span class="s1">'index.html'</span><span class="o">))</span>
      <span class="o">})</span>
    <span class="o">}</span>

    // endpoint para top ranked dos filmes
    app.get<span class="o">(</span><span class="s1">'/api/topRatedRecommended'</span>, async <span class="o">(</span>req, res<span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
      const topRatedResponse <span class="o">=</span> await apiCall<span class="o">(</span>optionsTopRatedRecommended<span class="o">)</span>
      const randomIndex <span class="o">=</span> Math.floor<span class="o">(</span>Math.random<span class="o">()</span> <span class="k">*</span> Math.floor<span class="o">(</span>20<span class="o">))</span>
      const topRatedRandomMovie <span class="o">=</span> topRatedResponse.results[randomIndex]
      res.json<span class="o">(</span>topRatedRandomMovie<span class="o">)</span>
      console.log<span class="o">(</span><span class="sb">`</span>/api/topRatedRecommended endpoint has been called!<span class="sb">`</span><span class="o">)</span>
    <span class="o">})</span>

    // endpoint para detalhe <span class="k">do </span>filme
    app.get<span class="o">(</span><span class="s1">'/api/movieDetails/:tmdbId'</span>, async <span class="o">(</span>req, res<span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
      const <span class="nb">id</span> <span class="o">=</span> req.params.tmdbId
      optionsMovieDetails.url <span class="o">=</span> <span class="sb">`</span>https://api.themoviedb.org/3/movie/<span class="k">${</span><span class="nv">id</span><span class="k">}</span><span class="sb">`</span>
      res.json<span class="o">(</span>await apiCall<span class="o">(</span>optionsMovieDetails<span class="o">))</span>
      console.log<span class="o">(</span><span class="sb">`</span>/api/movieDetails/<span class="k">${</span><span class="nv">id</span><span class="k">}</span> endpoint has been called!<span class="sb">`</span><span class="o">)</span>
    <span class="o">})</span>

    // endpoint autocompletando nome filme
    app.get<span class="o">(</span><span class="s1">'/api/movieAutocomplete'</span>, async <span class="o">(</span>req, res<span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
      const query <span class="o">=</span> req.query.q
      optionsMovieAutocomplete.qs.query <span class="o">=</span> query
      res.json<span class="o">(</span>await apiCall<span class="o">(</span>optionsMovieAutocomplete<span class="o">))</span>
      console.log<span class="o">(</span><span class="sb">`</span>/api/movieAutocomplete?q<span class="o">=</span><span class="k">${</span><span class="nv">query</span><span class="k">}</span> endpoint has been called!<span class="sb">`</span><span class="o">)</span>
    <span class="o">})</span>

    // fazendo api ouvir a porta 5000
    app.listen<span class="o">(</span>port<span class="o">)</span>

    console.log<span class="o">(</span><span class="sb">`</span>API is listening on <span class="k">${</span><span class="nv">port</span><span class="k">}</span><span class="sb">`</span><span class="o">)</span>
  <span class="o">}</span> catch <span class="o">(</span>e<span class="o">)</span> <span class="o">{</span>
    console.error<span class="o">(</span>e<span class="o">)</span>
  <span class="o">}</span>
<span class="o">}</span>
endpointCreation<span class="o">()</span></code></pre></figure>

<h2 id="processo-conclu√≠do">Processo conclu√≠do</h2>
:ET